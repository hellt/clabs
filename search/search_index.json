{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Opensource catalog of containerlab based labs.</p> <p>The purpose of this catalog is to aggregate various labs built with containerlab project as well as to provide a platform for community members to share their labs and explain various use cases.</p>"},{"location":"#categories","title":"Categories","text":"<p>A few high-level categories were created to coarsely sort the lab submissions. At this moment the categories are:</p> <ul> <li>Routing &amp; Switching</li> <li>Telemetry</li> <li>Automation</li> <li>Security</li> </ul> <p>The reason for having a small number of very broad categories is to have a high-level structure in place. This categories are not meant to be the means for searching the specific lab or technology, but rather to provide a way to browse the labs sorted with these categories.</p> <p>We encourage visitors to use site search when looking for a specific lab/protocol/technology stack. The search is powerful and will yield better results.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>We believe in the community effort and encourage you to consider contributing your lab to this opensource and unaffiliated catalog.</p> <p>If you built a lab and you want to have a platform that offers a beautiful front end for your use case explanation consider raising a Pull Request with your submission.</p> <p>You can choose whether you want to host your clab files in this repo' <code>labs</code> directory, or in your own repository - both options are fine.</p> <p>Additionally, you might want to consider explaining the use cases for which you built a lab by adding a documentation article that goes along with a lab - like this CMP lab here.</p> <p>Or you can keep the explanation of the use case in your own repo/blog and just add a reference to it, as we did with this BGP VPLS lab.</p>"},{"location":"automation/comingsoon/","title":"Contributions are welcome","text":""},{"location":"rs/arista-bgp-evpn/","title":"Arista BGP EVPN","text":"Description Arista BGP EVPN Components Arista cEOS Resource requirements<sup>1</sup>  4  8 GB Topology file ceos-evpn-overlaid.clab.yml Version information<sup>2</sup> <code>containerlab:0.19.1</code> Authors Dharmesh Shah and Dave Varnum"},{"location":"rs/arista-bgp-evpn/#description","title":"Description","text":"<p>The topology and configs are based on the Arista BGP EVPN \u2013 Configuration Example.</p> <p>All credits belong to the Original Author.</p> <p>This is a cEOS (Arista Container for EOS) based EVPN VXLAN topology to illustrate following concepts</p> <ol> <li>MLAG</li> <li>L2 EVPN</li> <li>L3 EVPN</li> </ol>"},{"location":"rs/arista-bgp-evpn/#quickstart","title":"Quickstart","text":"<ol> <li>Install containerlab.</li> <li>Clone hellt/clabs repository</li> <li> <p>Change into <code>arista-bgp-evpn</code> repository and deploy the lab topology:</p> <pre><code>git clone https://github.com/hellt/clabs.git\ncd labs/arista-bgp-evpn\ncontainerlab dep -t ceos-evpn-overlaid.clab.yml\n</code></pre> </li> <li> <p>Follow the original blog post and perform the configurations, or use the provided resulting configs from the <code>configs</code> directory.</p> </li> </ol> <ol> <li> <p>Resource requirements are provisional. Consult with the installation guides for additional information. Memory deduplication techniques like UKSM might help with RAM consumption.\u00a0\u21a9</p> </li> <li> <p>The lab has been validated using these versions of the required tools/components. Using versions other than stated might lead to a non-operational setup process.\u00a0\u21a9</p> </li> </ol>"},{"location":"rs/bgp-vpls/","title":"BGP VPLS Deep dive","text":"Description BGP VPLS between Nokia SR OS and Juniper vMX Components Nokia SR OS, Juniper vMX Resource requirements<sup>1</sup>  2  7-10 GB Lab location hellt/bgp-vpls-lab Topology file vpls.clab.yml Version information<sup>2</sup> <code>containerlab:0.10.1</code>, <code>vr-sros:20.10.R1</code>, <code>vr-vmx:20.4R1.12</code>, <code>docker-ce:19.03.13</code>, <code>vrnetlab</code><sup>3</sup> Authors Roman Dodin"},{"location":"rs/bgp-vpls/#description","title":"Description","text":"<p>This lab demonstrates how containerlab can be used in a classical networking labs where the prime focus is not on the containerized NOS, but on a classic VM-based routers.</p> <p>The topology created in this lab matches the network used in the BGP VPLS Deep Dive article:</p> <p></p> <p>It allows readers to follow through the article with the author and create BGP VPLS service between the Nokia and Juniper routers using configuration snippets provided within the lab repository.</p> <p>As the article was done before Nokia introduced MD-CLI, the configuration snippets for SR OS were translated to MD-CLI.</p>"},{"location":"rs/bgp-vpls/#quickstart","title":"Quickstart","text":"<ol> <li>Ensure that your host supports virtualization and/or nested virtualization in case of a VM.</li> <li>Install<sup>4</sup> containerlab.</li> <li>Build if needed, vrnetlab container images for the routers used in the lab.</li> <li>Clone lab repository.</li> <li>Deploy the lab topology <code>clab dep -t vpls.clab.yml</code></li> </ol> <ol> <li> <p>Resource requirements are provisional. Consult with the installation guides for additional information. Memory deduplication techniques like UKSM might help with RAM consumption.\u00a0\u21a9</p> </li> <li> <p>The lab has been validated using these versions of the required tools/components. Using versions other than stated might lead to a non-operational setup process.\u00a0\u21a9</p> </li> <li> <p>Router images are built with vrnetlab v0.2.3. To reproduce the image, checkout to this commit and build the relevant images. Note, that you might need to use containerlab of the version that is stated in the description.\u00a0\u21a9</p> </li> <li> <p>If installing the latest containerlab, make sure to use the latest hellt/vrnetlab project as well, as there might have been changes with the integration. If unsure, install the containerlab version that is specified in the lab description.\u00a0\u21a9</p> </li> </ol>"},{"location":"rs/cvx03/","title":"Cumulus Test Drive","text":"Description Cumulus Linux Test Drive Components Cumulus Linux Resource requirements<sup>1</sup>  2  2 GB Topology file lab-start.clab.yml lab-final.clab.yml Name cvx03 Version information<sup>2</sup> <code>cvx:4.3.0</code> <code>docker-ce:19.03.13</code> Authors Michael Kashin"},{"location":"rs/cvx03/#description","title":"Description","text":"<p>The lab is a 5-node topology with 2 servers attached to a pair of leaf switches and a single spine switch. </p>"},{"location":"rs/cvx03/#use-cases","title":"Use cases","text":"<p>This is a \"Cumulus Test Drive\" topology designed to provide an overview of NVIDIA Cumulus Linux. It can be used together with a series of self-paced hands-on labs:</p> <ol> <li>Interface Configuration (Lab2) -- learn how to configure L2 (access, trunk, LAG) and L3 (SVI and VRR) interfaces.</li> <li>BGP Unnumbered (Lab3) -- learn how to configure BGP unnumbered between leaf and spine switches and advertise locally connected interfaces.</li> </ol> <p>Note</p> <p>Everything from Lab1 is already pre-configured when the topology is created with lab-start.clab.yml.</p> <p>Additionally, the lab directory contains a lab-final.clab.yml which will load final configurations as they appear at the end of Lab3.</p> <ol> <li> <p>Resource requirements are provisional. Consult with the installation guides for additional information.\u00a0\u21a9</p> </li> <li> <p>The lab has been validated using these versions of the required tools/components. Using versions other than stated might lead to a non-operational setup process.\u00a0\u21a9</p> </li> </ol>"},{"location":"rs/cvx04/","title":"Cumulus In The Cloud","text":"Description Cumulus In The Cloud Components Cumulus Linux Resource requirements<sup>1</sup>  2  4 GB Topology file symm-mh.clab.yml symm-mlag.clab.yml Name cvx04 Version information<sup>2</sup> <code>cvx:4.3.0</code> <code>docker-ce:19.03.13</code> Authors Michael Kashin"},{"location":"rs/cvx04/#description","title":"Description","text":"<p>The lab is a multi-node topology that consists of two racks with two dual-homed servers connected with a leaf-spine network.</p>"},{"location":"rs/cvx04/#use-cases","title":"Use cases","text":"<p>This is a \"Cumulus In The Cloud\" topology designed to demonstrate some of the advanced features of Cumulus Linux. It is based on the original CITC demo environment with the only exception being the reduced number of spine switches (2 instead of 4). The topology can be spun up fully provisioned with the following two configuration options:</p> <ol> <li>EVPN Multi-Homing -- an EVPN-VXLAN environment with layer 2 extension, layer 3 VXLAN routing and VRFs for multi-tenancy that uses a multicast underlay for VXLAN packet replication and does not use MLAG or CLAG.</li> <li>EVPN Symmetric Mode -- an EVPN-VXLAN environment with layer 2 extension, layer 3 VXLAN routing, VRFs for multi-tenancy and MLAG/CLAG for server multi-homing.</li> </ol>"},{"location":"rs/cvx04/#instructions","title":"Instructions","text":"<p>Each configuration option is provided in its own configuration file -- <code>symm-mh.clab.yml</code> or <code>symm-mlag.clab.yml</code>. </p> <p>Once up, each node can be accessed via ssh using its hostname (automatically populated in your <code>/etc/hosts</code> file) and the default credentials <code>root/root</code>:</p> <pre><code>ssh root@clab-citc-leaf01\nWarning: Permanently added 'clab-citc-leaf01,192.168.223.3' (ECDSA) to the list of known hosts.\nroot@clab-citc-leaf01's password:\nLinux 94992c82719f1172 4.19.0-cl-1-amd64 #1 SMP Cumulus 4.19.149-1+cl4.3u1 (2021-01-28) x86_64\nLast login: Fri Jul  9 13:35:48 2021 from 192.168.223.1\nroot@94992c82719f1172:mgmt:~# \n</code></pre> <ol> <li> <p>Resource requirements are provisional. Consult with the installation guides for additional information.\u00a0\u21a9</p> </li> <li> <p>The lab has been validated using these versions of the required tools/components. Using versions other than stated might lead to a non-operational setup process.\u00a0\u21a9</p> </li> </ol>"},{"location":"rs/cvx05/","title":"Cumulus 5.x EVPN VXLAN BGP fabric","text":"Description Cumulus Linux VX with leaf and spine topology Components Cumulus Linux Resource requirements<sup>1</sup>  4  5 GB Topology file topo.clab.yml Name cvx05 Version information<sup>2</sup> <code>cvx:5.3.0</code> <code>Docker version 25.0.3, build 4debf41</code>"},{"location":"rs/cvx05/#description","title":"Description","text":"<p>The lab consists of Cumulus Linux 5.3 fabric composed of 2 borders, 2 spines and 2 leafs. The topology demonstrate a EVPN VXLAN BGP configuration. The topology is additionally equipped with a Linux container connected to leaves to facilitate use cases which require access side emulation.</p>"},{"location":"rs/cvx05/#configuration","title":"Configuration","text":"<p>The custom docker image need to be built locally before running the deployment</p> <pre><code>docker build \\\n--force-rm=true \\\n-t cx_ebtables:5.3.0 \\\n-f cx_ebtables.Dockerfile .\n</code></pre> <p>All nodes have been provided with a startup configuration and should come up with all their interfaces fully configured.</p> <p>Once the lab is started, the nodes will be able to ping each other on their vlan interfaces:</p> <pre><code># ping leaf interface\nroot@border-1:/# ping 10.162.0.14\nPING 10.162.0.14 (10.162.0.14) 56(84) bytes of data.\n64 bytes from 10.162.0.14: icmp_seq=1 ttl=64 time=0.262 ms\n64 bytes from 10.162.0.14: icmp_seq=2 ttl=64 time=0.256 ms\n^C\n--- 10.162.0.14 ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 34ms\n</code></pre> <p>Logs of the NVUE process are placed in <code>/root/nvue.log</code>.</p>"},{"location":"rs/cvx05/#use-cases","title":"Use cases","text":"<ul> <li>Demonstrate how a <code>cvx</code> can run with a EVPN VXLAN BGP fabric</li> <li>Demonstrate Cumulus Linux Leaf and spine with NVUE configuration (introduced in version 5.X)</li> <li>Verify vlan trunking and access on connected host to a leaf</li> </ul> <ol> <li> <p>Resource requirements are provisional. Consult with the installation guides for additional information.\u00a0\u21a9</p> </li> <li> <p>The lab has been validated using these versions of the required tools/components. Using versions other than stated might lead to a non-operational setup process.\u00a0\u21a9</p> </li> </ol>"},{"location":"rs/rs/","title":"About","text":"<p>In the Routing &amp; Switching category we post the labs that fall under the broad category of Routing &amp; Switching domain. Here we add labs that has to do something with:</p> <ul> <li>IGP</li> <li>BGP</li> <li>MPLS</li> <li>Traffic Engineering</li> <li>QoS</li> <li>SR</li> </ul>"},{"location":"security/cmpv2/","title":"Certificate management with CMPv2","text":"Description Certificate Management with CMPv2 Components Nokia SR OS, EJBCA Resource requirements<sup>1</sup>  2  6 GB Topology file cmp.clab.yml Version information<sup>2</sup> <code>containerlab:0.12.0</code>, <code>vr-sros:21.2.R1</code>, <code>docker-ce:19.03.13</code>, <code>vrnetlab:0.2.3</code><sup>3</sup> Authors Colin Bookham, Roman Dodin <p>Management protocols of the modern day and age must be secure, there is not disagreement in that. But adding security layers is not free, the costs of having a secured communication is spread across development, capex/opex, support and many other domains.</p> <p>Some state of the art management protocols like gNMI do not even assume they can be used without a security layer on top<sup>4</sup>, which implies that its users will have to setup the necessary security infrastructure before gNMI can be used.</p> but what about unsecured gNMI? <p>It is a networking vendor's hack that allowed users to start playing with gNMI without setting up PKI infra. While it is possible, the gNMI specification clearly states that \"The session between the client and server MUST be encrypted using TLS...\".</p> <p>In case of gNMI, TLS protocol is used to secure the session between the client and the server. That inherently means:</p> <ul> <li>Certificate Authority (CA) must exist</li> <li>a set of keys and a certificate signing request (csr) must be created for a gNMI server (a router)</li> <li>CA has to sign this certificate</li> <li>A router needs to import this certificate and use it for gNMI protocol it runs</li> </ul> <p>As streaming telemetry and, consequently, gNMI are getting more popular, outgrowing the labs' simplified environments, operators are getting challenged with a question of how to enable certificate management for network devices at scale?</p>"},{"location":"security/cmpv2/#certificate-management-in-an-operator-network","title":"Certificate management in an operator' network","text":"<p>If you think that creating a CA and signing a few certificates is an easy thing to pull off with something like <code>openssl</code> or <code>certbot</code>, you might want to reconsider when a network of an operator is concerned.</p> <p>Network Operating Systems are not suitable to be used for something like <code>certbot</code>, as they won't be able to pass ACME challenge, nor DNS one. The manual certificate management with <code>openssl</code> can't stand a chance in a network with dozens and hundreds of nodes, this will get unmaintainable rather quickly.</p> <p>Ideally a workflow for maintaining certificates lifecycle in the operators network could look like this:</p> <ol> <li>CA maintains a registry of authenticated hosts for which it can enroll a certificate</li> <li>A node generates or obtains private/public keys</li> <li>A node contacts CA, authenticates and asks to issue/sign the certificate for it</li> <li>The signed certificate is transferred from CA to the node over the same channel</li> <li>Node installs that certificate</li> <li>Before the certificate is about to expire, the node reaches to CA and asks it to issue a new certificate that the node uses instead of the one that is expiring</li> </ol>"},{"location":"security/cmpv2/#cmpv2","title":"CMPv2","text":"<p>Luckily, a few protocols exist to adhere to a workflow like that, and in this tutorial we will focus on one of them - CMPv2<sup>5</sup>.</p> <p>CMPv2 is extensively used in mobile networks to manage certificates between the infrastructure nodes and it is also implemented by most networking vendors.</p> <p>Without going into much details it is sufficient to say, that CMPv2 follows the workflow outlined above and this lab will demonstrate how Nokia SR OS router can initiate a certificate enrollment process and update it when needed.</p> <p>To make use of CMPv2 we need to have a CA that supports that protocol. This lab uses EJBCA server from primekey via their official docker image.</p> <p>Info</p> <p>The purpose of this lab is to provide a complete environment to demonstrate how CMPv2 can be used to manage certificates in an operator' network.</p>"},{"location":"security/cmpv2/#deploying-a-lab","title":"Deploying a lab","text":"<p>As usual with containerlab labs any deployment is a one-click task. Copy this lab' clab file, ensure that you have <code>_license.txt</code> file for SR OS node available in your current working directory and deploy.</p> <pre><code>\u276f clab dep -t cmp.clab.yml\nINFO[0000] Parsing &amp; checking topology file: cmp.clab.yml \nINFO[0000] Creating lab directory: /root/clabs/labs/cmpv2/clab-cmp \nINFO[0000] Creating container: ejbca                    \nINFO[0000] Creating container: sr                       \nINFO[0001] Writing /etc/hosts file                      \n+---+----------------+--------------+--------------------------+---------+-------+---------+----------------+----------------------+\n| # |      Name      | Container ID |          Image           |  Kind   | Group |  State  |  IPv4 Address  |     IPv6 Address     |\n+---+----------------+--------------+--------------------------+---------+-------+---------+----------------+----------------------+\n| 1 | clab-cmp-ejbca | 14f21198f5a7 | primekey/ejbca-ce        | linux   |       | running | 172.20.20.6/24 | 2001:172:20:20::6/80 |\n| 2 | clab-cmp-sr    | 8e3123c84b3a | vrnetlab/vr-sros:21.2.R1 | vr-sros |       | running | 172.20.20.5/24 | 2001:172:20:20::5/80 |\n+---+----------------+--------------+--------------------------+---------+-------+---------+----------------+----------------------+\n</code></pre> Persistent EJBCA <p>The clab file configuration for EJBCA assumes that no persistency is needed across lab runs. When the lab is destroyed, EJBCA config are removed as well. If EJBCA persistency is desired, users need to create a directory on their container host and mount it in the clab file like that: <pre><code>binds:\n  - /home/ejbca:/mnt/persistent\n</code></pre> This will save the EJBCA database under the <code>/home/ejbca</code> dir on the container host</p> <p>When the lab starts, the EJBCA enters its initialization routine. You can monitor the progress with <code>docker logs -f clab-cmp-ejbca</code>. Once finished, the EJBCA web server will be available via <code>8443</code> port.</p>"},{"location":"security/cmpv2/#ejbca-configuration","title":"EJBCA Configuration","text":"<p>EJBCA exposes web interface for its configuration. To access the main admin panel we use HTTPS connection over 8443 port - <code>https://localhost:8443/ejbca/adminweb/</code> - which is exposed by containerlab to 8443 port of the container host.</p> <p></p>"},{"location":"security/cmpv2/#cmp-alias","title":"CMP Alias","text":"<p>From the EJBCA perspective the CMP protocol configuration is done with creating a \"CMP Alias\".</p> <p>On the EJBCA Administration home page, select CMP Configuration in the left hand pane (under System Configuration) and add a CMP Alias; in our case named \"CMP-Server\".</p> <p>Once it is added, select edit, and then in the CMP Authentication Module ensure that \"DnPartPwd\" is selected and that the Subject DN Part is CN. This is used to extract the username of the node from its CN field when the node reaches out to CA and asks to enroll its certificate.</p> <p></p> <p>Select Save at the bottom of the window to commit the CMP configuration.</p>"},{"location":"security/cmpv2/#certificate-profile","title":"Certificate Profile","text":"<p>The Certificate Profile is a one-off configuration requirement. By default, the EJBCA server uses a certificate profile called <code>ENDUSER</code>. This profile sets X.509v3 extensions for Key Usage and Extended Key Usage to TLS Client authentication and Email Protection only.</p> <p></p> <p>Since we want to use the certificate for gNMI (TLS Server) and the default <code>ENDUSER</code> profile cannot be edited, we need to create a new certificate profile disabling these extensions.</p> <p>From the EJBCA Administration home page, select Certificate Profiles under CA Functions, and add a new entry. The below output shows the creation of a certificate profile called END-ENTITY, which removes all X509v3 extensions with the exception of Subject Alternative Name.</p> <p></p>"},{"location":"security/cmpv2/#end-entity-profile","title":"End Entity Profile","text":"<p>The End Entity Profile is a one-off configuration requirement.</p> <p>To allow End Entities to use the newly-created Certificate Profile, we need to create an End Entity profile to reference it.</p> <p>From the EJBCA Administration home page, select End Entity Profiles under RA Functions. Add a new profile, in our case <code>EE-PROFILE</code>, and edit the following:</p> <ul> <li>In the subject DN Attributes pane, use the Subject DN Attributes drop-down menu to add the required parts of the DN. In this case we add Country, State, and Organisation in addition to the existing Common Name. Tick all of them as required.</li> <li>In the Other Subject Attributes pane, use the Subject Alternative Name drop-down menu to add IP Address. Again, tick as required.</li> <li>In the \"Main Certificate Data\" pane use the drop-down menu for Default Certificate Profile to select the END-ENTITY certificate profile. In the Other subject attributes pain select IP Address as the Subject Alternative Name.  Select Save at the bottom of the screen.</li> </ul> <p></p> <p>There is no requirement to enter the Password (or Enrolment Code) in the End Entity Profile. This differs on a per End Entity basis and will therefore be entered at that level.</p>"},{"location":"security/cmpv2/#end-entity","title":"End Entity","text":"<p>End Entity configuration is required for each and every router that will be issued with an X.509 certificate.</p> <p>From the EJBCA Administration home page, select \"Add End Entity\" in the left hand pane under RA Functions.</p> <ul> <li>In the End Entity Profile field select the previously created <code>EE-PROFILE</code></li> <li>The password or enrolment code should be the same value as the CN entered in the Subject DN Attributes section and also in the CMP Initial-Registration request subsequently sourced by the SR-OS node.</li> <li>Complete the subject DN attributes. This example uses Country (C), State (ST), Organisation (O), and Common Name (CN). Again, the same values will be used in the CMP Initial-Registration request subsequently sourced by the SR-OS node.</li> <li>Add the IP address as the subject alternative name so that the issued certificate will also be valid for node's IP address. In our case we will use the management IP address that containerlab assigned for us (172.20.20.5)</li> <li>Select the previously configured END-ENTITY profile as the certificate profile.</li> </ul> <p></p> <p>When all fields have been completed, select Add at the bottom of the screen. This completes EJBCA configuration.</p>"},{"location":"security/cmpv2/#ca-certificate","title":"CA certificate","text":"<p>To let our SR OS node to verify the certificate chain and be able to use CMPv2 protocol with the EJBCA, we need to transfer the CA certificate to it.</p> <p>CA certificate of the EJBCA server can be downloaded from the Registration Authority server that runs on EJBCA node.</p> <p>From the EJBCA Administration homepage, in the left hand pane select RA Web, which opens up another \"EJBCA's RA GUI\" tab. From here select \"CA Certificates and CRLs\" from the options along the top of the screen, and then download the Management CA Certificate in PEM format simply by selecting the appropriate link.</p> <p>Info</p> <p>Management CA certificate can also be downloaded from the headless VM using lynx or any other text-based browser.</p> <p>Next copy over this certificate to the SR OS node:</p> <pre><code>scp ManagementCA.pem admin@clab-cmp-sr:cf3:/\nWarning: Permanently added 'clab-cmp-sr,172.20.20.5' (RSA) to the list of known hosts.\n\nadmin@clab-cmp-sr's password:\nManagementCA.pem                                     100% 1848    18.7KB/s   00:00\n</code></pre> <p>We will import this certificate into SR OS at a later stage.</p>"},{"location":"security/cmpv2/#sr-os-configuration","title":"SR OS Configuration","text":""},{"location":"security/cmpv2/#keys-generation","title":"Keys generation","text":"<p>To create a router's certificate we first need to have a private/public key pair. Many NOS'es allow to generate the keys \"on-box\", and that is what we will use here:</p> <pre><code>//admin certificate gen-keypair cf3:/sr-key size 2048 type rsa\n</code></pre> <p>The generation process create the keys, but they are not imported yet. To import the keys issue:</p> <pre><code>//admin certificate import type key input cf3:/sr-key output sr-key format der\n</code></pre>"},{"location":"security/cmpv2/#ca-certificate-import","title":"CA certificate import","text":"<p>Next step is to import the ManagementCA certificate of EJBCA. We copied it over a few steps before, now let's import it:</p> <pre><code>//admin certificate import type cert input cf3:/ManagementCA.pem output ManagementCA.pem format pem\n</code></pre> <p>When certificate/keys get imported, the artifacts are copied over to a system directory named <code>system-pki</code>. As a result of a previous import, there will be a key file present with a name <code>sr-key</code>.</p> <p>The imported certificated can be displayed to ensure that it is the one that is needed:</p> <pre><code>//admin certificate display type cert format der cf3:/system-pki/ManagementCA.pem\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            22:41:be:6b:87:94:a6:34:06:ce:73:63:01:6e:e5:80:d2:34:2d:5c\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: UID=c-0gkhtv71ootnm60rn, CN=ManagementCA, O=EJBCA Container Quickstart\n&lt;SNIPPED&gt;\n</code></pre>"},{"location":"security/cmpv2/#ca-profile","title":"CA profile","text":"<p>Now it is time to touch PKI related configuration on SR OS. We start by configuring CA Profile which defines the Certificate Authority for our SR OS node. This profile will hold the CMPv2 configuration</p> <pre><code>edit-config private\n\n# enable profile\n/configure system security pki ca-profile \"ejbca-profile\" admin-state enable\n\n# refer to the CA cert file we imported before\n/configure system security pki ca-profile ejbca-profile cert-file ManagementCA.pem\n\n# allow unprotected messages\n/configure system security pki ca-profile ejbca-profile cmpv2 accept-unprotected-message error-message\n/configure system security pki ca-profile ejbca-profile cmpv2 accept-unprotected-message pkiconf-message\n\n# specify sender info during cmpv2 initial registration message\n/configure system security pki ca-profile ejbca-profile cmpv2 always-set-sender-for-ir\n\n# skip CRL check\n/configure system security pki ca-profile \"ejbca-profile\" revocation-check crl-optional\n\n# set URL of CMPv2 server\n/configure system security pki ca-profile ejbca-profile cmpv2 url url-string http://172.20.20.6:8080/ejbca/publicweb/cmp/CMP-Server\n\n# add CMPv2 authentication data\n/configure system security pki ca-profile \"ejbca-profile\" cmpv2 key-list key 1 password sr\n\ncommit\n</code></pre> <p>Let's talk about the last two for a moment. There we first say how to reach CMPv2 server, and to get its address, we use the management address that containerlab assigned to EJBCA node (172.20.20.6 in our case), then goes the static URL until the last element where we specify the CMP Alias created earlier on EJBCA. Our CMP Alias was <code>CMP-Server</code>, thus it is appeared in the URL for EJBCA server.</p> <p>Then we create a key-list that holds a password that should match the enrollment code that we used during End Entity creation. We used <code>sr</code> as the password string, thus we are referencing it in plain text as <code>key 1</code>.</p> <p>To verify the operation status of the CA Profile:</p> <pre><code>A:admin@sr# /show certificate ca-profile \"ejbca-profile\"\n\n===============================================================================\nPKI CA-Profile Information\n===============================================================================\nCA Profile     : ejbca-profile                  Admin State    : up\nDescription    : (Not Specified)\nCRL File       : (Not Specified)\nCert File      : ManagementCA.pem\nOper State     : up\nOper Flags     : &lt;none&gt;\nRevoke Chk     : crl-optional\n\nCMPv2\n-------------------------------------------------------------------------------\nHTTP Timeout   : 30 secs                        Router         : Base\nCA URL         : http://172.20.20.6:8080/ejbca/publicweb/cmp/CMP-Server\nSign Cert URL  : (Not Specified)\nUnprot Err Msg : enabled                        Unprot Pki Conf: enabled\nSame RecipNonce: disabled\nfor Poll-reqs\nSet Sndr for IR: True\nHTTP version   : 1.1\n</code></pre> Check SR OS &lt;-&gt; EJBCA connectivity <p>If something doesn't work, check if your router can reach EJBCA. In our case, EJBCA management IP is 172.20.20.6, so we can check if it's reachable from SR OS: <pre><code>(pr)[/]\nA:admin@sr# ping 172.20.20.6 router-instance \"management\"\nPING 172.20.20.6 56 data bytes\n64 bytes from 172.20.20.6: icmp_seq=1 ttl=63 time=0.668ms.\n</code></pre></p>"},{"location":"security/cmpv2/#cmpv2-protocol-operations","title":"CMPv2 Protocol Operations","text":""},{"location":"security/cmpv2/#initial-registration","title":"Initial Registration","text":"<p>Protocol wise everything starts with Initial Registration message that End Entity (SR OS router) node sends towards CMP server (EJBCA).</p> <p>Use the following <code>admin certificate</code> command to send the CMPv2 initial-registration message and receive a signed certificate from the CA. The protection-algorithm in use is <code>password</code>, and the actual password should be equivalent to the value of CN as configured in the EJBCA End Entity Configuration, as should the values entered in the subject-dn.</p> <pre><code>//admin certificate cmpv2 initial-registration ca \"ejbca-profile\" key-to-certify sr-key protection-alg password sr reference 1 subject-dn C=NL,ST=ZH,O=Nokia,CN=sr ip-addr 172.20.20.5 save-as cf3:/sr-cert.der\n\nProcessing request...\nReceived 'accepted'.\n</code></pre> <p>With this command we made SR OS node to contact CMPv2 Server running on EJBCA and requesting it to enroll a certificate for it. Since EJBCA had an End Entity configured with matched Subject DN fields and plain text password authentication, the request succeeded, and SR OS got its signed certificate. The certificate will be valid for IP SAN <code>172.20.20.5</code>.</p> <p>The request that SR OS sent can be viewed with the following command:</p> <pre><code>//admin certificate cmpv2 show-request ca \"ejbca-profile\"\n\n===============================================================================\nCMPv2 Request\n===============================================================================\nCA Profile          : ejbca-profile\nOriginal Request    : initialRegistration\nRequest Start Time  : 2021/03/30 19:24:40\nMessage Protection  : password-based\nReference number    : 1\nSubject DN          : C=NL,ST=ZH,O=Nokia,CN=sr\nSubject Alt. Name\n    Domain Name     : (Not Specified)\n    IP Address      : (Not Specified)\nKey to Certify      : sr-key\nSave-as file path   : cf3:\\sr-cert.der\nRequest Status      : processed\nCA Response         : accepted\nCA Reply Time       : 2021/03/30 19:24:41\nAdditional Info     : (Not Specified)\n===============================================================================\n</code></pre> <p>To display the freshly minted certificate:</p> <pre><code>//admin certificate display type cert format der cf3:/sr-cert.der\n\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            08:92:70:57:1e:d6:f7:93:5f:1a:26:d4:9e:cf:be:66:88:07:80:07\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: UID=c-0gkhtv71ootnm60rn, CN=ManagementCA, O=EJBCA Container Quickstart\n        Validity\n            Not Before: Mar 30 19:24:28 2021 GMT\n            Not After : Mar 30 19:24:28 2023 GMT\n        Subject: CN=sr, O=Nokia, ST=ZH, C=NL\n        &lt;SNIP&gt;\n        X509v3 extensions:\n            X509v3 Subject Alternative Name:\n                IP Address:172.20.20.6\n</code></pre> <p>As the above output shows, the received certificate is indeed signed by EJBCA and is enrolled for our SR OS node, valid for both Subject-DN and node's IP Address.</p> <p> packet capture</p> <p>This pcap captures the message exchange during the initial-registration request, consisting of initialisation request (ir), initialisation response (ip),  certificate confirmation, and PKI confirmation</p> <p>Once the certificate has been passed by the CA, it needs to be imported so that it can be used for PKI purposes. Note that because the input file is in DER format, the output file is also in DER format. Outputting to a different format will result in a failed import.</p> <pre><code>//admin certificate import type cert input cf3:/sr-cert.der output sr-cert format der\n</code></pre>"},{"location":"security/cmpv2/#configure-verify-secured-gnmi","title":"Configure &amp; verify secured gNMI","text":"<p>To test that the issued certificate is good to be used for secured gNMI we need to create another SR OS constructs - Certificate Profile and TLS Server Profile.</p> <p>Readers can refer to \"Securing gNMI with TLS\" lab which goes into details of this, here we will just repeat the needed commands:</p> <pre><code># configure certificate profile\n/configure system security tls cert-profile sr-cert-prof entry 1 certificate-file sr-cert\n/configure system security tls cert-profile sr-cert-prof entry 1 key-file sr-key\n/configure system security tls cert-profile sr-cert-prof admin-state enable\n\n# ciphers list\n/configure system security tls server-cipher-list \"ciphers\" cipher 1 name tls-rsa-with3des-ede-cbc-sha\n/configure system security tls server-cipher-list \"ciphers\" cipher 2 name tls-rsa-with-aes128-cbc-sha256\n\n# configure server profile\n/configure system security tls server-tls-profile sr-server-tls-prof cert-profile \"sr-cert-prof\" admin-state enable\n/configure system security tls server-tls-profile sr-server-tls-prof cert-profile \"sr-cert-prof\" cipher-list \"ciphers\"\n\n# make gNMI to use tls profile\n/configure system grpc tls-server-profile \"sr-server-tls-prof\"\ncommit\n</code></pre> <p>Now when gNMI is configured to use the TLS security, we can verify that it all works by using gnmic client with specifying the EJBCA CA file for verification.</p> <pre><code># using Mgmt IP address of the node\ngnmic -a 172.20.20.5 -u admin -p admin  --tls-ca /root/clabs/labs/cmpv2/ManagementCA.pem capabilities\ngNMI version: 0.7.0\nsupported models:\n  - nokia-conf, Nokia, 21.2.R1\n  - nokia-state, Nokia, 21.2.R1\n  - nokia-li-state, Nokia, 21.2.R1\n  - nokia-li-conf, Nokia, 21.2.R1\nsupported encodings:\n  - JSON\n  - BYTES\n  - PROTO\n</code></pre> <p>At this stage, we demonstrated how a network node can successfully enroll its certificate that can be used to secure the gNMI communication channel. What we haven't covered yet is the way to manage the certificate lifecycle. That is the goal of the subsequent sections.</p>"},{"location":"security/cmpv2/#certificate-request","title":"Certificate Request","text":"<p>A Certificate Request message is used to obtain a new certificate after the End Entity has obtained the initial certificate from the CA. The message flow is similar to that of the Initial Request and consists of the Certificate Request (cr) and Certificate Response (cp), followed by the Certificate Confirmation and PKI Confirmation.</p> <p>When making the Certificate-Request for a new certificate a requirement is to generate and load the new certificate without having to make any configuration changes to the TLS configuration. At present, the SR OS TLS cert-profile references a certificate with the name of \"sr-cert\" and a key-pair with the name of \"sr-key\".</p> <pre><code>(pr)[/configure system security tls cert-profile \"sr-cert-prof\"]\nA:admin@sr# info\n    admin-state enable\n    entry 1 {\n        certificate-file \"sr-cert\"\n        key-file \"sr-key\"\n    }\n</code></pre> <p>The certificate request requires generation of a new keypair. Note that when the key is output to the <code>system-pki</code> directory the same filename is used as that already referenced in the TLS cert-profile.</p> <pre><code>//admin certificate gen-keypair cf3:/sr-key size 2048 type rsa\n//admin certificate import type key input cf3:/sr-key output sr-key format der\n</code></pre> <p>The syntax of the Certificate Request from the router is similar to that of the Initial Request, with the notable exception that no password protection is required as the digital signature from the previously issued certificate is used as a form of authentication. The command calls the old keypair as well as the newly-generated keypair, but in this case they refer to the same filename.</p> <p>Note</p> <p>To make a certificate request to the EJBCA server before a certificate has expired, search the relevant End Entity and change the Status of that End Entity from \"Generated\" to \"New\". As well as delete the existing certificate file from SR OS compact flash: <code>file remove cf3:/sr-cert.der</code> before requesting a new certificate.</p> <pre><code>//admin certificate cmpv2 cert-request ca \"ejbca-profile\" current-key sr-key current-cert sr-cert newkey sr-key subject-dn C=NL,ST=ZH,O=Nokia,CN=sr ip-addr 172.20.20.5 save-as cf3:/sr-cert.der\nProcessing request...\nReceived 'accepted'.\n</code></pre> <p>The \"accepted\" indication means that the certificate was successfully issued by the CA. This can also be verified with the following command.</p> <pre><code>//admin certificate cmpv2 show-request ca \"ejbca-profile\"\n\n===============================================================================\nCMPv2 Request\n===============================================================================\nCA Profile          : ejbca-profile\nOriginal Request    : certRequest\nRequest Start Time  : 2021/03/31 07:15:20\nMessage Protection  : signature-based\nCurrent Certificate : sr-cert\nHash Algorithm      : sha1\nSubject DN          : C=NL,ST=ZH,O=Nokia,CN=sr\nSubject Alt. Name\n    Domain Name     : (Not Specified)\n    IP Address      : 172.20.20.5\nCurrent Key         : sr-key\nNew Key             : sr-key\nSave-as file path   : cf3:\\sr-cert.der\nRequest Status      : processed\nCA Response         : accepted\nCA Reply Time       : 2021/03/31 07:15:20\nAdditional Info     : (Not Specified)\n===============================================================================\n</code></pre> <p> packet capture</p> <p>This pcap captures the message exchange during the Certificate Request procedure.</p> <p>It is thereafter necessary to import the received certificate into the <code>system-pki</code> directory for use.</p> <pre><code>//admin certificate import type cert input cf3:/sr-cert.der output sr-cert format der\n</code></pre> <p>Finally, it is necessary to do a reload of the certificate and keypair to ensure that the new keypair and certificate are loaded into memory.</p> <pre><code>//admin certificate reload type cert-key-pair sr-cert protocol tls key-file sr-key\n</code></pre> <p>The reload status can be seen in log 101:</p> <pre><code>A:admin@sr# /show log log-id 101\n\n===============================================================================\nEvent Log 101 log-name 101\n===============================================================================\nDescription : Default NETCONF event stream\nLog contents  [size=500   next event=249  (not wrapped)]\n\n248 2021/03/31 07:21:20.403 UTC MINOR: SECURITY #2101 Base TLS\n\"Certificate file \"sr-cert\" has been reloaded.\"\n\n247 2021/03/31 07:21:20.403 UTC MINOR: SECURITY #2101 Base TLS\n\"Key file \"sr-key\" has been reloaded.\"\n</code></pre> <p>Now we can again check that gNMI client can successfully call the RPCs over a secure channel with a new node certificates in place.</p>"},{"location":"security/cmpv2/#automated-certificate-renewal","title":"Automated certificate renewal","text":"<p>As demonstrated above, Certificate Request message can be used to re-issue a new certificate. Let's close the loop here and create an automated renewal routine that will result in a router to request a new certificate by the time a current one is about to expire.</p> <p>The SR OS PKI configuration provides an option for generating expiration warnings when a certificate and/or CRL is about to expire. On our node we configured the certificate expiration warning to be 6 hours, with a repeat warning every subsequent hour:</p> <pre><code>/configure system security pki certificate-expiration-warning hours 6 repeat-hours 1\n</code></pre> <p>The corresponding log event looks like the following:</p> <pre><code>*A:pe-1# show log log-id 90\n\n===============================================================================\nEvent Log 90\n===============================================================================\nDescription : (Not Specified)\nMemory Log contents  [size=100   next event=114  (wrapped)]\n\n113 2021/03/15 15:47:51.997 GMT MINOR: SECURITY #2095 Base Cert\n\"Certificate pe1-cert used by TLS will expire in 5 hour(s) and 0 minute(s).\"\n\n110 2021/03/15 14:47:51.997 GMT MINOR: SECURITY #2095 Base Cert\n\"Certificate pe1-cert used by TLS will expire in 6 hour(s) and 0 minute(s).\"\n</code></pre> <p>The system is configured to use the Event Handling System such that when the certificate expiration alarm is generated with an hour to go, that the system will request and install a new certificate. A key role in this procedure plays a script that is executed when a certain message appears in the log.</p> <pre><code>//file show auto-cert-update.txt\nFile: auto-cert-update.txt\n-------------------------------------------------------------------------------\nexit all\nfile remove cf3:/sr-cert.der force\nsleep 2\n//admin certificate gen-keypair cf3:/sr-key size 2048 type rsa\nsleep 5\n//admin certificate import type key input cf3:/sr-key output sr-key format der\nsleep 5\n//admin certificate cmpv2 cert-request ca \"ejbca-profile\" current-key sr-key current-cert sr-cert newkey sr-key subject-dn C=NL,ST=ZH,O=Nokia,CN=sr ip-addr 172.20.20.5 save-as cf3:/sr-cert.der\nsleep 10\n//admin certificate import type cert input cf3:/sr-cert.der output sr-cert format der\nsleep 5\n//admin certificate reload type cert-key-pair sr-cert protocol tls key-file sr-key\nexit all\n</code></pre> <p>Essentially this script just repeats the steps we did manually before.</p> <p>The following snipped shows configuration steps required to configure EHS subsystem of SR OS to call the script when the certificate only has 1 hour left before expiry:</p> <pre><code># create script control policy\n/configure system script-control script \"auto-cert-update\" location cf3:/auto-cert-update.txt admin-state enable\n/configure system script-control script-policy \"auto-cert-update\" results \"cf3:/cert-update-results.txt\" admin-state enable\n/configure system script-control script-policy \"auto-cert-update\" script name \"auto-cert-update\"\n\n# configure log filter to match on a message about cert expiration\n/configure log filter 100 default-action drop\n/configure log filter 100 named-entry cert-update action forward\n/configure log filter 100 named-entry cert-update match message eq  \"Certificate sr-cert used by TLS will expire in 1 hour(s) and 0 minute(s)\"\n\n# create event handler that will call a previously created script\n/configure log event-handling handler \"auto-cert-update\" entry 1 script-policy name \"auto-cert-update\"\n/configure log event-handling handler \"auto-cert-update\" admin-state enable\n\n# configure event trigger to match on log filter rule and call the handler\n/configure log event-trigger security event tmnxPkiCertBeforeExpWarning entry 1 handler \"auto-cert-update\" admin-state enable\n/configure log event-trigger security event tmnxPkiCertBeforeExpWarning entry 1 filter \"100\"\n/configure log event-trigger security event tmnxPkiCertBeforeExpWarning admin-state enable\n</code></pre> <p>After the certificate has expired there are various places which can be used to confirm the EHS script was successful. Firstly, a check of log 99, which shows that the SROS CLI file cf3:/auto-cert-update was completed successfully.</p> <pre><code>*A:pe-1# show log log-id 99\n\n===============================================================================\nEvent Log 99\n===============================================================================\nDescription : Default System Log\nMemory Log contents  [size=500   next event=3223  (wrapped)]\n\n3222 2021/03/16 03:30:58.138 GMT MAJOR: SYSTEM #2053 Base CLI 'exec'\n\"The CLI user initiated 'exec' operation to process the commands in the SROS CLI file cf3:/auto-cert-update.txt has completed with the result of success\"\n\n3221 2021/03/16 03:30:26.001 GMT MAJOR: SYSTEM #2052 Base CLI 'exec'\n\"A CLI user has initiated an 'exec' operation to process the commands in the SROS CLI file cf3:/auto-cert-update.txt\"\n\n3220 2021/03/16 03:30:25.997 GMT MINOR: SYSTEM #2069 Base EHS script\n\"Ehs handler :\"auto-cert-update\" with the description : \"\" was invoked by the cli-user account \"not-specified\".\"\n</code></pre> <p>Finally, a users can check of the event-handling handler \"auto-cert-update\" shows a success, and the last time the script was executed.</p> <pre><code>show log event-handling handler \"auto-cert-update\"\n\n===============================================================================\nEvent Handling System - Handlers\n===============================================================================\n\n===============================================================================\nHandler          : auto-cert-update\n===============================================================================\nDescription      : (Not Specified)\nAdmin State      : up                                Oper State : up\n\n-------------------------------------------------------------------------------\nHandler Execution Statistics\n  Success        : 1\n  Err No Entry   : 0\n  Err Adm Status : 0\nTotal            : 1\n\n-------------------------------------------------------------------------------\n-------------------------------------------------------------------------------\nHandler Action-List Entry\n-------------------------------------------------------------------------------\nEntry-id         : 10\nDescription      : (Not Specified)\nAdmin State      : up                                Oper State : up\nScript\n  Policy Name    : auto-cert-update\n  Policy Owner   : TiMOS CLI\nMin Delay        : 0\nLast Exec        : 03/16/21 03:30:26 BST\n-------------------------------------------------------------------------------\nHandler Action-List Entry Execution Statistics\n  Success        : 1\n  Err Min Delay  : 0\n  Err Launch     : 0\n  Err Adm Status : 0\nTotal            : 1\n===============================================================================\n</code></pre>"},{"location":"security/cmpv2/#summary","title":"Summary","text":"<p>Handling of PKI infrastructure and TLS certificates is a complicated matter when a network of hundreds of nodes is concerned. An automated solution is needed to allow for certificate enrollment and lifecycle management.</p> <p>CMPv2 protocol is one of the protocols aimed to solve that task in a network infrastructure domain. Being extensively used in 4G and 5G networks, it is also applicable to nodes in the operators network. This lab demonstrated CMPv2 protocol operations and how it can be used to automatically enroll and renew certificates for an SR OS router using EJBCA server.</p> <p>The benefit of CMPv2 and protocols like it is in their ability to scale without increasing the operational effort. Once configured, the new nodes will come up with their templated configuration and will be able to request certificates and auto-renew them when time comes.</p> <ol> <li> <p>Resource requirements are provisional. Consult with the installation guides for additional information. Memory deduplication techniques like UKSM might help with RAM consumption.\u00a0\u21a9</p> </li> <li> <p>The lab has been validated using these versions of the required tools/components. Using versions other than stated might lead to a non-operational setup process.\u00a0\u21a9</p> </li> <li> <p>Router images are built with vrnetlab v0.2.3. To reproduce the image, checkout to this commit and build the relevant images. Note, that you might need to use containerlab of the version that is stated in the description.\u00a0\u21a9</p> </li> <li> <p>https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md#31-session-security-authentication-and-rpc-authorization \u21a9</p> </li> <li> <p>The protocol is defined in RFC4210, RFC4211 and RFC4212, with further guidance in the transmission of CMP messages over HTTP being defined in RFC6712.\u00a0\u21a9</p> </li> </ol>"},{"location":"security/gnmitls/","title":"Securing gNMI with TLS","text":"Description Securing gNMI with containerlab generated certificates Components Nokia SR OS Resource requirements<sup>1</sup>  2  6 GB Topology file gnmi-tls.clab.yml Authors Roman Dodin Version information<sup>2</sup> <code>containerlab:0.12.0</code>, <code>vr-sros:21.2.R1</code>, <code>docker-ce:19.03.13</code>, <code>vrnetlab:0.2.3</code><sup>3</sup>, <code>gnmic:0.9.0</code>"},{"location":"security/gnmitls/#description","title":"Description","text":"<p>Nowadays more and more protocols require a secured transport layer for their operation where TLS is king. Creating a Certificate Authority, public/private keys, certificate signing requests and signing those was a mundane task that most network engineers tried to avoid...</p> <p>But thanks to the opensource projects like cfssl it is now less painful to overcome the difficulties of bootstrapping the PKI infra at least in the lab setting. Containerlab embeds parts of cfssl to expose what we consider a critical set of commands that enable our users to quickly set up TLS enabled transports.</p> <p>This lab demonstrates how containerlab' helper commands instantly create the necessary certificates for CA and the SR OS router to enable TLS-secured gNMI communication.</p>"},{"location":"security/gnmitls/#lab-deployment","title":"Lab deployment","text":"<p>Before we start generating certificates, let's deploy this simple lab which consists of a single Nokia SR OS node with no data interfaces whatsoever.</p> <pre><code>clab dep -t ~/cert01.clab.yml\n</code></pre> <p>Write down the IP address that container engine assigned to our node, as we will use it in the certificate phase.</p> <pre><code>+---+----------------+--------------+--------------------------+---------+-------+---------+----------------+----------------------+\n| # |      Name      | Container ID |          Image           |  Kind   | Group |  State  |  IPv4 Address  |     IPv6 Address     |\n+---+----------------+--------------+--------------------------+---------+-------+---------+----------------+----------------------+\n| 1 | clab-cert01-sr | 183c82e1a033 | vrnetlab/vr-sros:21.2.R1 | vr-sros |       | running | 172.20.20.2/24 | 2001:172:20:20::2/80 |\n+---+----------------+--------------+--------------------------+---------+-------+---------+----------------+----------------------+\n</code></pre>"},{"location":"security/gnmitls/#certificate-generation","title":"Certificate generation","text":"<p>As promised, containerlab aims to provide a necessary tooling for users to enable TLS transport. In short, we need to create a CA which will sign the certificate of the SR OS node that we will also create. For that we will leverage the following containerlab commands:</p> <ul> <li><code>tools cert ca create</code> - creates a Certificate Authority</li> <li><code>tools cert sign</code> - creates certificate/key for a host and signs the certificate with CA</li> </ul>"},{"location":"security/gnmitls/#create-ca","title":"Create CA","text":"<p>First we need to create a Certificate Authority that will be able to sign a node's certificate. Leveraging the default values that <code>ca create</code> command embeds, we can be as short as this:</p> <pre><code># create CA certificate and key in the current working dir\ncontainerlab tools cert ca create\n</code></pre> <p>As a result of this command we will have <code>ca.pem</code> and <code>ca-key.pem</code> files generate in our current working directory. That is all it takes to create a CA.</p>"},{"location":"security/gnmitls/#create-and-sign-node-certificate","title":"Create and sign node certificate","text":"<p>Next is the node certificate that we need to create and sign with the CA created before. Again, this is pretty simple, we just need to specify the DNS names and IP addresses we want this certificate to be valid for.</p> <p>Since containerlab creates persistent DNS names for the fully qualified node names, we know that DNS name of our router is <code>clab-cert01-sr</code>, which follow the pattern of <code>clab-&lt;lab-name&gt;-&lt;node-name&gt;</code>.</p> <p>We will also make our certificate to be valid for the IP address of the node. To get the IP address of the node refer to the summary table which containerlab provides when the lab deployment finishes. In our case the IP was <code>172.20.20.2</code>.</p> <p>Knowing the DNS and IP of the node we can create the certificate and key and immediately sign it with the Certificate Authority created earlier. All in one command!</p> <pre><code>containerlab tools cert sign --ca-cert ca.pem --ca-key ca-key.pem \\\n             --hosts clab-cert01-sr,172.20.20.2\n\nINFO[0000] Creating and signing certificate:\n  Hosts=[\"clab-cert01-sr\" \"172.20.20.2\"], CN=containerlab.srlinux.dev,\n  C=Internet, L=Server, O=Containerlab, OU=Containerlab Tools \n</code></pre> <p>Here we leveraged <code>tools cert sign</code> command that firstly inits the CA by using the its files <code>ca.pem</code> and <code>ca-key.pem</code> and then creates a node certificate for the DNS and IP names provided via <code>hosts</code> flag.</p> <p>Now, in our working directory we have the signed node's certificate with the file names <code>cert.pem</code>, <code>cert-key.pem</code> and CA cert and key from the previous step.</p> <p>Two short commands and you are good to go and configure SR OS to use them.</p>"},{"location":"security/gnmitls/#configuring-sr-os","title":"Configuring SR OS","text":""},{"location":"security/gnmitls/#transferring-certificate-and-key","title":"Transferring certificate and key","text":"<p>At a minimum we need to transfer the node certificate and key. An extra mile would be to also transfer the CA files to the node, but we will not do that in this lab.</p> <p>We will transfer the certificate files with SCP, but you can choose any other means:</p> <pre><code>scp cert-key.pem admin@clab-cert01-sr:cf3:/\nscp cert.pem admin@clab-cert01-sr:cf3:/\n</code></pre>"},{"location":"security/gnmitls/#importing-certificate-and-key","title":"Importing certificate and key","text":"<p>SR OS needs the certificates to be imported after they are copied to the flash card. For that we need to switch to use the Classic CLI notation with <code>//</code> command prefix:</p> <pre><code>//admin certificate import type cert input cf3:/cert.pem output cert.pem format pem\n//admin certificate import type key input cf3:/cert-key.pem output cert-key.pem format pem\n</code></pre> <p>When certificates are imported, they are copied to a system <code>system-pki</code> directory on the flash card:</p> <pre><code>[/]\nA:admin@sr# file list system-pki\n\nVolume in drive cf3 on slot A is SROS VM.\n\nVolume in drive cf3 on slot A is formatted as FAT32\n\nDirectory of cf3:\\system-pki\n\n03/26/2021  08:50p      &lt;DIR&gt;          ./\n03/26/2021  08:50p      &lt;DIR&gt;          ../\n03/26/2021  08:51p                1256 cert-key.pem\n03/26/2021  08:50p                1095 cert.pem\n               2 File(s)                   2351 bytes.\n               2 Dir(s)               683569152 bytes free.\n</code></pre> <p>This command verifies that our two files - node' certificate and a matching private key - have been imported successfully.</p>"},{"location":"security/gnmitls/#certificate-profile","title":"Certificate profile","text":"<p>Next step is to create a certificate profile that will bring the imported certificate file and a its private key under a single logical construct.</p> <pre><code>/configure system security tls cert-profile sr-cert-prof  entry 1 certificate-file cert.pem\n/configure system security tls cert-profile sr-cert-prof entry 1 key-file cert-key.pem\n/configure system security tls cert-profile sr-cert-prof admin-state enable\n</code></pre>"},{"location":"security/gnmitls/#ciphers-list","title":"Ciphers list","text":"<p>Proceed with creating a ciphers list that SR OS will use when negotiating TLS with. We choose a single cipher, though many are available on SR OS to match your client capabilities.</p> <pre><code>/configure system security tls server-cipher-list \"ciphers\" cipher 1 name tls-rsa-with3des-ede-cbc-sha\n</code></pre>"},{"location":"security/gnmitls/#server-tls-profile","title":"Server TLS profile","text":"<p>Finishing step is configuring the specific SR OS construct called \"server-tls-profile\". It sets which TLS profile, ciphers (and optionally CRL) to use for a specific TLS server configuration.</p> <pre><code>/configure system security tls server-tls-profile sr-server-tls-prof cert-profile \"sr-cert-prof\" admin-state enable\n/configure system security tls server-tls-profile sr-server-tls-prof cipher-list \"ciphers\"\n</code></pre>"},{"location":"security/gnmitls/#configuring-secured-grpc","title":"Configuring secured gRPC","text":"<p>Now when TLS objects are all created, we can make gRPC services on SR OS make use of the TLS. To do that, we override the default unsecured gRPC that <code>vr-sros</code> uses with a one that uses the tls-server-profile we created earlier:</p> <pre><code>/configure system grpc tls-server-profile \"sr-server-tls-prof\"\ncommit\n</code></pre> gRPC config beforegRPC config after <pre><code>(pr)[/configure system grpc]\nA:admin@sr# info\n    admin-state enable\n    allow-unsecure-connection\n    gnmi {\n        auto-config-save true\n    }\n    rib-api {\n        admin-state enable\n    }\n</code></pre> <pre><code>*(pr)[/configure system grpc]\nA:admin@sr# info\n    admin-state enable\n    tls-server-profile \"sr-server-tls-prof\"\n    gnmi {\n        auto-config-save true\n    }\n    rib-api {\n        admin-state enable\n    }\n</code></pre> <p>Now gRPC services will require TLS to be used by the clients, let's verify it.</p>"},{"location":"security/gnmitls/#verification","title":"Verification","text":"<p>We will use gnmic CLI to issue gNMI RPCs to check if TLS is now really enforced and used.</p> <p>First, let's use the DNS name that our SR OS node an entry in /etc/hosts for<sup>4</sup>.</p> <pre><code>gnmic -a clab-cert01-sr -u admin -p admin --tls-ca ca.pem capabilities\ngNMI version: 0.7.0\nsupported models:\n  - nokia-conf, Nokia, 21.2.R1\n  - nokia-state, Nokia, 21.2.R1\n  - nokia-li-state, Nokia, 21.2.R1\n  - nokia-li-conf, Nokia, 21.2.R1\nsupported encodings:\n  - JSON\n  - BYTES\n  - PROTO\n</code></pre> <p>Note here, that we use the <code>--tls-ca</code> flag of gnmic to make sure that we verify the server's (router's) certificate by checking it with a CA certificate.</p> <p>If you remember, when we created the router' certificate we specified not only its DNS name, but also the IP address. This allows us to use management IP address with gNMI and still being able to verify the router's certificate:</p> <pre><code>gnmic -a 172.20.20.2 -u admin -p admin --tls-ca ca.pem capabilities\ngNMI version: 0.7.0\n&lt;SNIP&gt;\n</code></pre> <p>Feel free to examine the pcap I captured with containerlab wireshark integration that shows the flow of TCP handshake with TLS negotiation for the same gNMI Capabilities request.</p>"},{"location":"security/gnmitls/#summary","title":"Summary","text":"<p>Pretty neat, right? With just the two commands (<code>tools cert ca create</code> and <code>tools cert sign</code>) we managed to perform a lot of actions in the background which resulted in a signed CA and node certificates.</p> <p>Those certificates we can now use for any protocol that requires TLS and the certificates are verifiable and legit.</p> <ol> <li> <p>Resource requirements are provisional. Consult with the installation guides for additional information. Memory deduplication techniques like UKSM might help with RAM consumption.\u00a0\u21a9</p> </li> <li> <p>The lab has been validated using these versions of the required tools/components. Using versions other than stated might lead to a non-operational setup process.\u00a0\u21a9</p> </li> <li> <p>Version of our fork - hellt/vrnetlab with which the container image of this VM was generated.\u00a0\u21a9</p> </li> <li> <p>the <code>/etc/hosts</code> entry is created by containerlab when it deploys the nodes.\u00a0\u21a9</p> </li> </ol>"},{"location":"security/security/","title":"About","text":"<p>In the Security category we post the labs that touch on the security aspects of networking:</p> <ul> <li>TLS</li> <li>PKI</li> <li>Certificate management</li> <li>IPSec</li> <li>DNSSEC</li> <li>RPKI</li> </ul>"},{"location":"telemetry/telemetry/","title":"About","text":"<p>Telemetry category envisioned to be hosting labs that create the environments to demonstrate/test/validate telemetry collection. If your lab has one of the following keywords, it is a good candidate to end up in this category:</p> <ul> <li>Telemetry</li> <li>Telegraf</li> <li>Prometheus</li> <li>Influx</li> <li>gNMI</li> <li>Yang Push</li> </ul>"}]}